import{_ as d,r as i,o as h,c as r,a as e,b as t,d as n,w as s}from"./app-84c1d8f6.js";const c={},l=e("h1",{id:"nodes",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#nodes","aria-hidden":"true"},"#"),t(" Nodes")],-1),_={id:"api",tabindex:"-1"},u=e("a",{class:"header-anchor",href:"#api","aria-hidden":"true"},"#",-1),f=e("p",null,"Access all points of the WebSocket and HTTP API.",-1),m={id:"binary-sensor",tabindex:"-1"},p=e("a",{class:"header-anchor",href:"#binary-sensor","aria-hidden":"true"},"#",-1),b=e("p",null,"Creates a binary sensor entity in Home Assistant that is controlled from with Node-RED.",-1),g={id:"button",tabindex:"-1"},v=e("a",{class:"header-anchor",href:"#button","aria-hidden":"true"},"#",-1),x=e("p",null,"Creates a button in Home Assistant that triggers a flow in Node-RED",-1),w={id:"call-service",tabindex:"-1"},y=e("a",{class:"header-anchor",href:"#call-service","aria-hidden":"true"},"#",-1),A=e("p",null,[t("Sends a request to home assistant for any domain and service available ( "),e("code",null,"light/turn_on"),t(", "),e("code",null,"input_select/select_option"),t(", etc..)")],-1),C={id:"current-state",tabindex:"-1"},H=e("a",{class:"header-anchor",href:"#current-state","aria-hidden":"true"},"#",-1),k=e("p",null,"Fetches the last known state for any entity on input",-1),E={id:"device",tabindex:"-1"},S=e("a",{class:"header-anchor",href:"#device","aria-hidden":"true"},"#",-1),N=e("p",null,"Creates device automations and calls device actions",-1),T={id:"device-config",tabindex:"-1"},R=e("a",{class:"header-anchor",href:"#device-config","aria-hidden":"true"},"#",-1),D=e("p",null,"Configuration node for devices added to Home Assistant",-1),L={id:"entity",tabindex:"-1"},B=e("a",{class:"header-anchor",href:"#entity","aria-hidden":"true"},"#",-1),I=e("p",null,"Creates an entity in Home Assistant which can be manipulated from this node",-1),P={id:"entity-config",tabindex:"-1"},z=e("a",{class:"header-anchor",href:"#entity-config","aria-hidden":"true"},"#",-1),F=e("p",null,"Configuration node for the different entity type nodes",-1),O={id:"events-all",tabindex:"-1"},W=e("a",{class:"header-anchor",href:"#events-all","aria-hidden":"true"},"#",-1),G=e("p",null,"Listens for all types of events from home assistant with the ability to filter by event type",-1),V={id:"events-state",tabindex:"-1"},U=e("a",{class:"header-anchor",href:"#events-state","aria-hidden":"true"},"#",-1),q=e("p",null,[t("Listens for only "),e("code",null,"state_changed"),t(" events from home assistant")],-1),M={id:"fire-event",tabindex:"-1"},Z=e("a",{class:"header-anchor",href:"#fire-event","aria-hidden":"true"},"#",-1),j=e("p",null,"Fire an event on the event bus",-1),J={id:"get-entities",tabindex:"-1"},K=e("a",{class:"header-anchor",href:"#get-entities","aria-hidden":"true"},"#",-1),Q=e("p",null,"Get entities based on search criteria with 3 different output options",-1),X={id:"get-history",tabindex:"-1"},Y=e("a",{class:"header-anchor",href:"#get-history","aria-hidden":"true"},"#",-1),$=e("p",null,"Fetches HomeAssistant history on input",-1),ee={id:"number",tabindex:"-1"},te=e("a",{class:"header-anchor",href:"#number","aria-hidden":"true"},"#",-1),ne=e("p",null,"Creates a number in Home Assistant which can be manipulated from this node.",-1),oe={id:"poll-state",tabindex:"-1"},se=e("a",{class:"header-anchor",href:"#poll-state","aria-hidden":"true"},"#",-1),ae=e("p",null,"Outputs the state of an entity at regular intervals, optionally also at startup and every time the entity changes if desired",-1),ie={id:"render-template",tabindex:"-1"},de=e("a",{class:"header-anchor",href:"#render-template","aria-hidden":"true"},"#",-1),he=e("p",null,"Allows rendering of templates on input",-1),re={id:"select",tabindex:"-1"},ce=e("a",{class:"header-anchor",href:"#select","aria-hidden":"true"},"#",-1),le=e("p",null,"Creates a select entity in Home Assistant which can be manipulated from this node.",-1),_e={id:"sensor",tabindex:"-1"},ue=e("a",{class:"header-anchor",href:"#sensor","aria-hidden":"true"},"#",-1),fe=e("p",null,"Creates a sensor entity in Home Assistant that is controlled from with Node-RED.",-1),me={id:"sentence",tabindex:"-1"},pe=e("a",{class:"header-anchor",href:"#sentence","aria-hidden":"true"},"#",-1),be={href:"https://www.home-assistant.io/voice_control/",target:"_blank",rel:"noopener noreferrer"},ge={href:"https://www.home-assistant.io/integrations/conversation/",target:"_blank",rel:"noopener noreferrer"},ve={id:"server-config",tabindex:"-1"},xe=e("a",{class:"header-anchor",href:"#server-config","aria-hidden":"true"},"#",-1),we=e("p",null,"Home Assistant connection configuration",-1),ye={id:"switch",tabindex:"-1"},Ae=e("a",{class:"header-anchor",href:"#switch","aria-hidden":"true"},"#",-1),Ce=e("p",null,"Creates a switch entity in Home Assistant that is controlled from with Node-RED. Also allows a flow to be started from a service call.",-1),He={id:"tag",tabindex:"-1"},ke=e("a",{class:"header-anchor",href:"#tag","aria-hidden":"true"},"#",-1),Ee=e("p",null,"Outputs when Home Assistant receives a tag scanned event for a configured tag id",-1),Se={id:"text",tabindex:"-1"},Ne=e("a",{class:"header-anchor",href:"#text","aria-hidden":"true"},"#",-1),Te=e("p",null,"Creates a text entity in Home Assistant which can be manipulated from this node.",-1),Re={id:"time",tabindex:"-1"},De=e("a",{class:"header-anchor",href:"#time","aria-hidden":"true"},"#",-1),Le=e("p",null,"A node that can be scheduled to trigger at a future date and time from a Home Assistant entity",-1),Be={id:"trigger-state",tabindex:"-1"},Ie=e("a",{class:"header-anchor",href:"#trigger-state","aria-hidden":"true"},"#",-1),Pe=e("p",null,[t("Much like the "),e("code",null,"State Changed Node"),t(" however, provides some advanced functionality around common automation use cases")],-1),ze={id:"update-config",tabindex:"-1"},Fe=e("a",{class:"header-anchor",href:"#update-config","aria-hidden":"true"},"#",-1),Oe=e("p",null,"Allows updating of entities configuration in Home Assistant",-1),We={id:"wait-until",tabindex:"-1"},Ge=e("a",{class:"header-anchor",href:"#wait-until","aria-hidden":"true"},"#",-1),Ve=e("p",null,"When an input is received the node will wait until the condition is met or the timeout occurs then will pass on the last received message",-1),Ue={id:"webhook",tabindex:"-1"},qe=e("a",{class:"header-anchor",href:"#webhook","aria-hidden":"true"},"#",-1),Me=e("p",null,"Outputs the data received from the created webhook in Home Assistant",-1),Ze={id:"zone",tabindex:"-1"},je=e("a",{class:"header-anchor",href:"#zone","aria-hidden":"true"},"#",-1),Je=e("p",null,"Outputs when one of the configured entities enter or leaves one of the defined zones",-1);function Ke(Qe,Xe){const o=i("RouterLink"),a=i("ExternalLinkIcon");return h(),r("div",null,[l,e("h2",_,[u,t(),n(o,{to:"/node/API.html"},{default:s(()=>[t("API")]),_:1})]),f,e("h2",m,[p,t(),n(o,{to:"/node/binary-sensor.html"},{default:s(()=>[t("Binary Sensor")]),_:1})]),b,e("h2",g,[v,t(),n(o,{to:"/node/button.html"},{default:s(()=>[t("Button")]),_:1})]),x,e("h2",w,[y,t(),n(o,{to:"/node/call-service.html"},{default:s(()=>[t("Call Service")]),_:1})]),A,e("h2",C,[H,t(),n(o,{to:"/node/current-state.html"},{default:s(()=>[t("Current State")]),_:1})]),k,e("h2",E,[S,t(),n(o,{to:"/node/device.html"},{default:s(()=>[t("Device")]),_:1})]),N,e("h2",T,[R,t(),n(o,{to:"/node/device-config.html"},{default:s(()=>[t("Device Config")]),_:1})]),D,e("h2",L,[B,t(),n(o,{to:"/node/entity.html"},{default:s(()=>[t("Entity")]),_:1})]),I,e("h2",P,[z,t(),n(o,{to:"/node/entity-config.html"},{default:s(()=>[t("Entity Config")]),_:1})]),F,e("h2",O,[W,t(),n(o,{to:"/node/events-all.html"},{default:s(()=>[t("Events: all")]),_:1})]),G,e("h2",V,[U,t(),n(o,{to:"/node/events-state.html"},{default:s(()=>[t("Events: state")]),_:1})]),q,e("h2",M,[Z,t(),n(o,{to:"/node/fire-event.html"},{default:s(()=>[t("Fire Event")]),_:1})]),j,e("h2",J,[K,t(),n(o,{to:"/node/get-entities.html"},{default:s(()=>[t("Get Entities")]),_:1})]),Q,e("h2",X,[Y,t(),n(o,{to:"/node/get-history.html"},{default:s(()=>[t("Get History")]),_:1})]),$,e("h2",ee,[te,t(),n(o,{to:"/node/number.html"},{default:s(()=>[t("Number")]),_:1})]),ne,e("h2",oe,[se,t(),n(o,{to:"/node/poll-state.html"},{default:s(()=>[t("Poll State")]),_:1})]),ae,e("h2",ie,[de,t(),n(o,{to:"/node/render-template.html"},{default:s(()=>[t("Render Template")]),_:1})]),he,e("h2",re,[ce,t(),n(o,{to:"/node/select.html"},{default:s(()=>[t("Select")]),_:1})]),le,e("h2",_e,[ue,t(),n(o,{to:"/node/sensor.html"},{default:s(()=>[t("Sensor")]),_:1})]),fe,e("h2",me,[pe,t(),n(o,{to:"/node/sentence.html"},{default:s(()=>[t("Sentence")]),_:1})]),e("p",null,[t("A sentence trigger fires when "),e("a",be,[t("Assist"),n(a)]),t(" matches a sentence from a voice assistant using the default "),e("a",ge,[t("conversation agent"),n(a)]),t(".")]),e("h2",ve,[xe,t(),n(o,{to:"/node/config-server.html"},{default:s(()=>[t("Server Config")]),_:1})]),we,e("h2",ye,[Ae,t(),n(o,{to:"/node/switch.html"},{default:s(()=>[t("Switch")]),_:1})]),Ce,e("h2",He,[ke,t(),n(o,{to:"/node/tag.html"},{default:s(()=>[t("Tag")]),_:1})]),Ee,e("h2",Se,[Ne,t(),n(o,{to:"/node/text.html"},{default:s(()=>[t("Text")]),_:1})]),Te,e("h2",Re,[De,t(),n(o,{to:"/node/time.html"},{default:s(()=>[t("Time")]),_:1})]),Le,e("h2",Be,[Ie,t(),n(o,{to:"/node/trigger-state.html"},{default:s(()=>[t("Trigger: state")]),_:1})]),Pe,e("h2",ze,[Fe,t(),n(o,{to:"/node/update-config.html"},{default:s(()=>[t("Update Config")]),_:1})]),Oe,e("h2",We,[Ge,t(),n(o,{to:"/node/wait-until.html"},{default:s(()=>[t("Wait Until")]),_:1})]),Ve,e("h2",Ue,[qe,t(),n(o,{to:"/node/webhook.html"},{default:s(()=>[t("Webhook")]),_:1})]),Me,e("h2",Ze,[je,t(),n(o,{to:"/node/zone.html"},{default:s(()=>[t("Zone")]),_:1})]),Je])}const $e=d(c,[["render",Ke],["__file","index.html.vue"]]);export{$e as default};
