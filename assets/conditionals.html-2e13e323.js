import{_ as e,o as a,c as d,e as n}from"./app-84c1d8f6.js";const t={},o=n('<h1 id="conditionals" tabindex="-1"><a class="header-anchor" href="#conditionals" aria-hidden="true">#</a> Conditionals</h1><h2 id="rules" tabindex="-1"><a class="header-anchor" href="#rules" aria-hidden="true">#</a> Rules</h2><h3 id="is-and-is-not" tabindex="-1"><a class="header-anchor" href="#is-and-is-not" aria-hidden="true">#</a> <code>is</code> and <code>is not</code></h3><h3 id="and-and-and" tabindex="-1"><a class="header-anchor" href="#and-and-and" aria-hidden="true">#</a> <code>&lt;</code> and <code>&lt;=</code> and <code>&gt;</code> and <code>&gt;=</code></h3><h3 id="in-and-not-in" tabindex="-1"><a class="header-anchor" href="#in-and-not-in" aria-hidden="true">#</a> <code>in</code> and <code>not in</code></h3><p>The value is expected to be a comma-separated list of items.</p><h3 id="jsonata" tabindex="-1"><a class="header-anchor" href="#jsonata" aria-hidden="true">#</a> <code>JSONata</code></h3><p>When this is selected as a rule it expects a boolean to be returned by the value.</p><h3 id="starts-with" tabindex="-1"><a class="header-anchor" href="#starts-with" aria-hidden="true">#</a> <code>starts with</code></h3><h3 id="in-group" tabindex="-1"><a class="header-anchor" href="#in-group" aria-hidden="true">#</a> <code>in group</code></h3><h2 id="value-types" tabindex="-1"><a class="header-anchor" href="#value-types" aria-hidden="true">#</a> Value Types</h2><h3 id="string-and-number-and-boolean-and-regular-expression-and-jsonata-expression" tabindex="-1"><a class="header-anchor" href="#string-and-number-and-boolean-and-regular-expression-and-jsonata-expression" aria-hidden="true">#</a> <code>string</code> and <code>number</code> and <code>boolean</code> and <code>regular expression</code> and <code>JSONata expression</code></h3><p>Evaluates and returns the value as the selected type.</p><h3 id="msg-and-flow-and-global" tabindex="-1"><a class="header-anchor" href="#msg-and-flow-and-global" aria-hidden="true">#</a> <code>msg</code> and <code>flow</code> and <code>global</code></h3><p>Reference to the different contexts of Node-RED.</p><h3 id="entity-and-preventity" tabindex="-1"><a class="header-anchor" href="#entity-and-preventity" aria-hidden="true">#</a> <code>entity</code> and <code>prevEntity</code></h3><p>Reference the entity that triggered the node.</p><ul><li><code>entity</code> is the current state entity</li><li><code>prevEntity</code> is the previous state entity</li></ul>',18),i=[o];function r(s,c){return a(),d("div",null,i)}const l=e(t,[["render",r],["__file","conditionals.html.vue"]]);export{l as default};
