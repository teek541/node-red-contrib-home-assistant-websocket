import{_ as i,r as d,o as n,c as l,a as t,d as a,w as s,b as e,e as h}from"./app-84c1d8f6.js";const r={},c=t("h1",{id:"exposed-nodes",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#exposed-nodes","aria-hidden":"true"},"#"),e(" Exposed Nodes")],-1),u=t("h2",{id:"available-to-all-event-nodes",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#available-to-all-event-nodes","aria-hidden":"true"},"#"),e(" Available to all event nodes")],-1),p=h('<h2 id="trigger-an-exposed-event-node-from-a-service-call-nodered-trigger" tabindex="-1"><a class="header-anchor" href="#trigger-an-exposed-event-node-from-a-service-call-nodered-trigger" aria-hidden="true">#</a> Trigger an exposed event node from a service call <code>nodered.trigger</code></h2><p>Exposed nodes can be triggered from a service call. The service call is <code>nodered.trigger</code> and it takes the following data properties:</p><h3 id="entity-id" tabindex="-1"><a class="header-anchor" href="#entity-id" aria-hidden="true">#</a> entity_id</h3><ul><li>Required</li></ul><p>The entity_id of the exposed node to trigger. This is the entity_id of the node in Home Assistant. For example, if the entity_id of the node in Home Assistant is <code>switch.my_node</code>, then the entity_id to use in the service call is <code>switch.my_node</code>.</p><h3 id="output-path" tabindex="-1"><a class="header-anchor" href="#output-path" aria-hidden="true">#</a> output_path</h3><ul><li>Optional</li><li>Defaults to 0</li><li>Can be a comma separated list of output paths</li></ul><p>The output path of the node to send the message through. When this value is set to 0, the message will be sent through all output paths. If this value is set to 1, the message will be sent through the first output path. When this value is set to 2, the message will be sent through the second output path, and so on.</p><h3 id="message" tabindex="-1"><a class="header-anchor" href="#message" aria-hidden="true">#</a> message</h3><ul><li>Required</li></ul><p>The message the triggered node will output. This can be any valid JSON object. For example, if the message is <code>{ &quot;payload&quot;: &quot;hello world&quot; }</code>, then the message will be sent to the node as <code>msg.payload</code> with the value of <code>hello world</code>.</p>',11);function g(m,f){const o=d("RouterLink");return n(),l("div",null,[c,u,t("p",null,[a(o,{to:"/node/events-all.html"},{default:s(()=>[e("Events: all")]),_:1}),e(", "),a(o,{to:"/node/events-state.html"},{default:s(()=>[e("events: state")]),_:1}),e(", "),a(o,{to:"/node/trigger-state.html"},{default:s(()=>[e("trigger: state")]),_:1}),e(", and "),a(o,{to:"/node/poll-state.html"},{default:s(()=>[e("poll state")]),_:1}),e(" nodes will have the option to be exposed to Home Assistant, and when enabled, it will show up in Home Assistant as a switch. Turning on and off these switches will disable/enable the nodes in Node-RED. This should help people who find themselves having to make input_booleans in HA to enable/disable flows. This is a much cleaner way to do it.")]),p])}const v=i(r,[["render",g],["__file","exposed-nodes.html.vue"]]);export{v as default};
