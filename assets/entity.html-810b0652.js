import{_ as d,r as i,o as r,c as h,a as e,b as t,d as a,e as o}from"./app-84c1d8f6.js";const c={},l=o('<div class="custom-container danger"><p class="custom-container-title">DEPRECATED</p><p>This node has been deprecated in favor of the individual entity nodes. The individual entity nodes can be used in subflows and added to devices.</p></div><h1 id="entity" tabindex="-1"><a class="header-anchor" href="#entity" aria-hidden="true">#</a> Entity</h1><p>Creates an entity in Home Assistant which can be manipulated from this node.</p><p><code>binary sensor</code>, <code>sensor</code>, and <code>switch</code></p>',4),u={class:"custom-container warning"},p=e("p",{class:"custom-container-title"},"WARNING",-1),b={href:"https://github.com/zachowj/hass-node-red",target:"_blank",rel:"noopener noreferrer"},f=e("h2",{id:"configuration",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#configuration","aria-hidden":"true"},"#"),t(" Configuration")],-1),g={id:"type",tabindex:"-1"},m=e("a",{class:"header-anchor",href:"#type","aria-hidden":"true"},"#",-1),y=o('<ul><li>Type: <code>string</code></li><li>Values <code>binary_sensor|sensor|switch</code></li><li>Default: <code>sensor</code></li></ul><p>The state the entity should be updated to</p><h3 id="home-assistant-config" tabindex="-1"><a class="header-anchor" href="#home-assistant-config" aria-hidden="true">#</a> Home Assistant Config</h3><ul><li>Type: <code>Object</code></li></ul><p>Configuration options available for the selected entity</p><div class="custom-container danger"><p class="custom-container-title">WARNING</p><p>Entity nodes will not work in a subflow due to the way they register themselves with Home Assistant. After a Node-RED restart, a new entity will be created in Home Assistant.</p></div><h2 id="sensor-configuration" tabindex="-1"><a class="header-anchor" href="#sensor-configuration" aria-hidden="true">#</a> Sensor Configuration</h2>',7),_={id:"state",tabindex:"-1"},w=e("a",{class:"header-anchor",href:"#state","aria-hidden":"true"},"#",-1),x=o('<ul><li>Type: <code>string | number | boolean</code></li></ul><p>The state the entity should be updated to</p><h3 id="attributes" tabindex="-1"><a class="header-anchor" href="#attributes" aria-hidden="true">#</a> Attributes</h3><ul><li>Type: <code>Object</code></li></ul><p>Key/Value pair of attributes to update. The key should be a string and the value can be a [string | number | boolean | object]</p><h3 id="input-override" tabindex="-1"><a class="header-anchor" href="#input-override" aria-hidden="true">#</a> Input Override</h3><ul><li>Type: <code>string</code></li><li>Values: <code>accept | merge | block</code></li></ul><p>Determine how input values will be handled. When merge is selected the message object values will override the configuration values.</p><h3 id="resend-state-and-attributes" tabindex="-1"><a class="header-anchor" href="#resend-state-and-attributes" aria-hidden="true">#</a> Resend state and attributes</h3><ul><li>Type: <code>boolean</code></li></ul><p>When creating the entity in Home Assistant this will also send the last updated state and attributes then node sent to Home Assistant</p><h2 id="switch-configuration" tabindex="-1"><a class="header-anchor" href="#switch-configuration" aria-hidden="true">#</a> Switch Configuration</h2><h3 id="output-on-state-change" tabindex="-1"><a class="header-anchor" href="#output-on-state-change" aria-hidden="true">#</a> Output on state change</h3><ul><li>Type: <code>boolean</code></li></ul><p>When the state of the switch changes it will output to the top if the switch is on or to the bottom if it is in the off position.</p><h3 id="payload" tabindex="-1"><a class="header-anchor" href="#payload" aria-hidden="true">#</a> Payload</h3><ul><li>Type: <code>str | num | bool | JSONata | timestamp</code></li></ul><p>Customizable output set to <code>msg.payload</code> if <code>Output on state change</code> is enabled.</p><h2 id="sensors-inputs" tabindex="-1"><a class="header-anchor" href="#sensors-inputs" aria-hidden="true">#</a> Sensors Inputs</h2><p>properties of <code>msg.payload</code></p><h3 id="state-1" tabindex="-1"><a class="header-anchor" href="#state-1" aria-hidden="true">#</a> state</h3><ul><li>Type: <code>string | number | boolean</code></li></ul><p>The state the entity should be updated to</p><h3 id="attributes-1" tabindex="-1"><a class="header-anchor" href="#attributes-1" aria-hidden="true">#</a> attributes</h3><ul><li>Type: <code>Object</code></li></ul><p>Key/Value pair of attributes to update. The key should be a string and the value can be a <code>[string | number | boolean | object]</code></p><h2 id="switch-inputs" tabindex="-1"><a class="header-anchor" href="#switch-inputs" aria-hidden="true">#</a> Switch Inputs</h2><h3 id="msg-enable" tabindex="-1"><a class="header-anchor" href="#msg-enable" aria-hidden="true">#</a> msg.enable</h3><ul><li>Type: <code>boolean</code></li></ul><p>Set to <code>true</code> to turn on the switch and <code>false</code> to turn off. If the message has a property <code>enable</code> set to the type <code>boolean</code> the node will not have any output.</p><h2 id="outputs" tabindex="-1"><a class="header-anchor" href="#outputs" aria-hidden="true">#</a> Outputs</h2><p><strong>Status Color</strong></p><ul><li>Green/Red: output from the node was due to input to the node</li><li>Blue: output from the node was due to the state of the node changing</li><li>Yellow: state of node changed but no output</li></ul>',33);function v(T,A){const s=i("ExternalLinkIcon"),n=i("Badge");return r(),h("div",null,[l,e("div",u,[p,e("p",null,[e("em",null,[t("Needs "),e("a",b,[t("Custom Integration"),a(s)]),t(" installed in Home Assistant for this node to function")])])]),f,e("h3",g,[m,t(" Type "),a(n,{text:"required"})]),y,e("h3",_,[w,t(" State "),a(n,{text:"required"})]),x])}const N=d(c,[["render",v],["__file","entity.html.vue"]]);export{N as default};
